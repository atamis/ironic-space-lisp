use std::str::FromStr;
use data::Literal;
use data::list;

grammar;

pub Num: Literal = r"[0-9]+" => Literal::Number(u32::from_str(<>).unwrap());

// [a-zA-Z0-9\-!?*+/$<>.=]
// can't start with number
pub Keyword: Literal = r"[a-zA-Z\-!?*+/$<>.=][a-zA-Z0-9\-!?*+/$<>.=]*" => Literal::Keyword(<>.to_string());

pub List: Literal = "(" <Exprs> ")" => list(<>);

pub ExprLiteral: Literal = {
    Num => <>,
    Keyword => <>,
    List => <>,
}

pub QuotedExpr: Literal = "'" <es: Expr> => list(vec![Literal::Keyword("quote".to_string()), es]);
pub QuasiquotedExpr: Literal = "`" <es: Expr> => list(vec![Literal::Keyword("quasiquote".to_string()), es]);
pub UnquotedExpr: Literal = "," <es: Expr> => list(vec![Literal::Keyword("unquote".to_string()), es]);

pub Expr: Literal = {
    ExprLiteral => <>,
    QuotedExpr => <>,
    QuasiquotedExpr => <>,
    UnquotedExpr => <>,
}


pub Exprs: Vec<Literal> = <Expr*> => <>;
